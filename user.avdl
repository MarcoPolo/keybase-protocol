@namespace("keybase.1")
protocol user {
	import idl "common.avdl";

	record Tracker {
		UID tracker;
		int status; // 0 == none, 1 == tracking
		int mtime;
	}

	array<Tracker> listTrackers(int sessionID, UID uid);
	array<Tracker> listTrackersByName(int sessionID, string username);
	array<Tracker> listTrackersSelf(int sessionID);

	record TrackProof {
		string proofType;
		string proofName;
		string idString;
	}

	record WebProof {
		string hostname;
		array<string> protocols;
	}

	record Proofs {
		array<TrackProof> social;
		array<WebProof> web;
		array<PublicKey> publicKeys;
	}

	record UserSummary {
		UID uid;
		string thumbnail;
		string username;
		int idVersion;
		string fullName;
		string bio;
		Proofs proofs;
		string sigIDDisplay;
		long trackTime;
	}

	// load user summaries for the supplied uids.
	// they are "unchecked" in that the client is not verifying the info from the server.
	// if len(uids) > 500, the first 500 will be returned.
	array<UserSummary> loadUncheckedUserSummaries(int sessionID, array<UID> uids);
	
	// Load a single user from the server, and verify key family data. This can
	// be expensive, thus the single UID argument instead of an array.
	User loadUser(int sessionID, union{null, UID} uid, string username, boolean self);

	// The list-tracking function get verified data from the tracking statements
	// in the user's own sigchain.
	array<UserSummary> listTracking(int sessionID, string filter);
	string listTrackingJSON(int sessionID, string filter, boolean verbose);

	// Search for users who match a given query
	array<UserSummary> search(int sessionID, string query);
}
